# @title Coursera Templates
# @description Coursera helper templates
# @task_type LASTMOD
#
file_export_version=3.0
/instance/org.scala-ide.sdt.core/org.scala-ide.sdt.core.preferences.Templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="org.scala-ide.sdt.core.templates" deleted\="false" description\="Coursera Standard Controller Template" enabled\="true" name\="ccontroller">import javax.inject.Inject\nimport play.api.mvc.Controller\nimport play.api.libs.json.Json\nimport org.coursera.playcour.binders.Pagination\nimport org.coursera.courservice.auth.AuthGroupCache\nimport org.coursera.courservice.auth.UserCache\nimport org.coursera.playcour.rest.RestController\nimport org.coursera.playcour.rest.Result\nimport org.coursera.playcour.rest.Errors\nimport org.coursera.courservice.auth.AuthGroups._\nimport javax.inject.Singleton\n\n@Singleton\nclass ${controllerName}Controller @Inject() (\n    authGroupCache\: AuthGroupCache, userCache\: UserCache) extends RestController(authGroupCache, userCache) {\n  /**\n   * Your action documentation\n   */\n  def ${actionName}(classId\: Int) \= Action(classId, SITE_ACCESS) { implicit request \=&gt;\n    /* change the body */\n    val list \= List(1,2,3)\n    Result(list, total \= None)\n  }\n}</template><template autoinsert\="true" context\="org.scala-ide.sdt.core.templates" deleted\="false" description\="Coursera Store Template" enabled\="true" name\="cstore">import org.coursera.data.sql.DBApi\nimport org.coursera.data.sql.ShardedDBApi\nimport org.coursera.util.Clock\nimport javax.inject.Singleton\n\n/**\n * Document what your Store does here..\n */\n@Singleton\nclass ${StoreName}Store @Inject() (db\: ShardedDBApi[Int], clock\: Clock) {\n}</template><template autoinsert\="true" context\="org.scala-ide.sdt.core.templates" deleted\="false" description\="Coursera Standard Controller Test" enabled\="true" name\="ctcontroller">import org.junit._\nimport org.junit.Assert._\nimport org.mockito.Mockito._\nimport org.mockito.Matchers.{ eq \=&gt; eql }\nimport org.mockito.Matchers._\nimport org.coursera.playcour.auth.AuthContextTestHelpers\nimport org.coursera.playcour.rest.TestHelpers\nimport play.api.test._\nimport play.api.test.Helpers._\nimport org.coursera.courservice.auth.UserCache\nimport org.coursera.courservice.auth.AuthGroupCache\nimport org.coursera.courservice.auth.AuthGroups\nimport org.coursera.courservice.auth.UserAccess\nimport org.coursera.courservice.auth.AuthGroupCacheMock\nimport org.coursera.courservice.auth.AuthGroupTest\n\nclass ${controllerName}Test extends AuthGroupTest {\n  var ${controllerName}\: ${controllerType} \= _\n\n  @Before\n  def setup() {\n    authGroupTestBefore()\n    ${controllerName} \= new ${controllerName}(${controllerParams}, authGroupCache, userCache)\n  }\n\n  @Test\n  def simple() {\n  }\n}</template><template autoinsert\="true" context\="org.scala-ide.sdt.core.templates" deleted\="false" description\="Coursera in-memory store test" enabled\="true" name\="ctstore">import org.junit._\nimport org.junit.Assert._\nimport org.mockito.Mockito._\nimport org.coursera.playcour.auth.AuthContextTestHelpers\nimport org.coursera.playcour.rest.TestHelpers\nimport play.api.test._\nimport play.api.test.Helpers._\nimport org.coursera.data.sql.ShardedDBApi\nimport org.coursera.data.sql.MockShardedDB\nimport java.sql.DriverManager\nimport anorm._\nimport anorm.SqlParser._\nimport org.joda.time._\nimport org.coursera.util.Clock\nimport org.coursera.util.MockClock\n\nclass ${storeName}Test {\n  var db\: ShardedDBApi[Int] \= _\n  var store\: ${storeName} \= _\n  var clock\: MockClock \= _\n\n  Class.forName("org.h2.Driver") // Load up the class.\n\n  // Note\: H2 doesn't have an enum type, so we just fake it with a varchar.\n  val DDL \= """CREATE TABLE announcements (\n              |  id int(11) PRIMARY KEY AUTO_INCREMENT,\n              |  title  text NOT NULL,\n              |  message longtext NOT NULL,\n              |  user_id int(11) NOT NULL,\n              |  open_time int(11) NOT NULL,\n              |  close_time int(11) NOT NULL,\n              |  icon VARCHAR(255) NOT NULL,\n              |  deleted int(4) NOT NULL DEFAULT 0,\n              |  email_announcements VARCHAR(20)\n              |);""".stripMargin\n  val CLASS_ID \= 926747\n\n  @Before\n  def setup() {\n    // Set up an in-memory H2 database\n    val conn \= DriverManager.getConnection("jdbc\:h2\:mem\:${storeName}test;MODE\=MYSQL", "sa", "")\n    db \= new MockShardedDB[Int](Some(conn))\n    clock \= new MockClock()\n    store \= new AnnouncementStore(db, clock)\n    SQL(DDL).execute()(conn) // Set up the database.\n  }\n\n  @After\n  def teardown() {\n    // Close the connection to not leak memeory.\n    db.withConnection(1)(conn \=&gt; conn.close())\n  }\n}</template></templates>
